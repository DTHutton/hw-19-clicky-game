{"version":3,"sources":["components/Navbar/index.js","components/CardWrapper/index.js","components/ClickCards/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","CardWrapper","children","ClickCards","state","pokemon","guessedArr","handleClick","id","includes","addIdToArray","shuffleArr","sort","Math","random","setState","console","log","this","map","name","image","key","alt","src","onClick","Component","Footer","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ktCAeeA,G,YAZA,SAAAC,GACX,OACI,6BACI,yBAAKC,UAAU,eACX,uBAAGC,KAAK,IAAID,UAAU,oBAAtB,eACA,yBAAKA,UAAU,QAAf,SACA,yBAAKA,UAAU,UAAf,oBCADE,G,MANK,SAAAH,GAChB,OACI,yBAAKC,UAAU,sBAAsBD,EAAMI,Y,sBCkDpCC,E,2MAjDXC,MAAQ,CACJC,UACAC,WAAY,I,EAUhBC,YAAc,SAAAC,GAEV,IAAI,EAAKJ,MAAME,WAAWG,SAASD,GAAnC,CAKA,IAAME,EAAY,sBAAO,EAAKN,MAAME,YAAlB,CAA8BE,IAC1CG,EAAa,YAAI,EAAKP,MAAMC,SAASO,MAAK,kBAAMC,KAAKC,SAAW,MAEtE,EAAKC,SAAS,CACVV,QAASM,EACTL,WAAYI,M,wEAIV,IAAD,OAEL,OADAM,QAAQC,IAAI,aAAcC,KAAKd,MAAME,YAEjCY,KAAKd,MAAMC,QAAQc,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACnB,yBAAKC,IAAKd,EAAIT,UAAU,QACpB,yBAAKA,UAAU,cACX,yBACIwB,IAAKH,EACLI,IAAKH,EACLb,GAAIA,EACJY,KAAMA,EACNK,QAAS,kBAAM,EAAKlB,YAAYC,e,GAzCnCkB,aCeVC,G,MAhBA,SAAA7B,GACX,OACI,6BACI,4BAAQC,UAAU,eACd,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,kBAAb,oCAEA,uBAAGA,UAAU,YAAYC,KAAK,iDAA9B,oBCDL4B,G,MANC,SAAA9B,GACZ,OACI,yBAAKC,UAAU,aAAaD,EAAMI,YCkB3B2B,E,iLAZX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GATUH,aCIEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2bb7139f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Navbar = props => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper\">\r\n                <a href=\"/\" className=\"brand-logo right\">Clicky Game</a>\r\n                <div className=\"left\">Score</div>\r\n                <div className=\"center\">Instructions</div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from \"react\"\nimport \"./style.css\"\n\nconst CardWrapper = props => {\n    return (\n        <div className=\"card-container row\">{props.children}</div>\n    )\n}\n\nexport default CardWrapper\n","import React, { Component } from \"react\"\nimport \"./style.css\"\nimport pokemon from \"../../pokemon.json\"\n\nclass ClickCards extends Component {\n\n    state = {\n        pokemon,\n        guessedArr: []\n    }\n\n    // gameOver() {\n    //     empty guessedArr\n    //     reset score\n    //     log high score\n    //     compare score with high score\n    // }\n\n    handleClick = id => {\n\n        if (this.state.guessedArr.includes(id)) {\n            // gameover()\n            return\n        } \n\n        const addIdToArray = [...this.state.guessedArr, id];\n        const shuffleArr = [...this.state.pokemon].sort(() => Math.random() - 0.5);\n\n        this.setState({\n            pokemon: shuffleArr,\n            guessedArr: addIdToArray\n        })\n    }\n\n    render() {\n        console.log('guessedArr', this.state.guessedArr);\n        return (\n            this.state.pokemon.map(({ id, name, image }) => (\n                <div key={id} className=\"card\">\n                    <div className=\"card-image\">\n                        <img\n                            alt={name}\n                            src={image}\n                            id={id}\n                            name={name}\n                            onClick={() => this.handleClick(id)}\n                        />\n                    </div>\n                </div>\n            ))\n\n        )\n    }\n}\n\nexport default ClickCards","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Footer = props => {\r\n    return (\r\n        <div>\r\n            <footer className=\"page-footer\">\r\n                <div className=\"footer-copyright\">\r\n                    <p className=\"copywrite-text\">Â© Clicky Game by Derek Hutton</p>\r\n\r\n                    <a className=\"repo-link\" href=\"https://github.com/DTHutton/hw-19-clicky-game\">\r\n                        GitHub Repo\r\n                    </a>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Wrapper = props => {\r\n    return (\r\n        <div className=\"container\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport CardWrapper from \"./components/CardWrapper\"\nimport ClickCards from \"./components/ClickCards\"\nimport Footer from \"./components/Footer\"\nimport Wrapper from \"./components/Wrapper\"\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar />\n        <CardWrapper>\n          <ClickCards />\n        </CardWrapper>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}